# Name of the GitHub Actions workflow. This is displayed in the "Actions" tab of your repository.
name: CI Pipeline for ML Model

# Controls when the workflow will run.
on:
  # Triggers the workflow on push events but only for the "main" branch.
  push:
    branches: [ "main" ]
  # Triggers the workflow on pull request events but only for the "main" branch.
  pull_request:
    branches: [ "main" ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel.
jobs:
  # This workflow contains a single job called "build-and-test".
  build-and-test:
    # The type of runner that the job will run on. We're using the latest version of Ubuntu.
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job.
    steps:
      # Step 1: Check-out your repository under $GITHUB_WORKSPACE, so your job can access it.
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up a specific version of Python.
      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      # Step 3: Install Python dependencies from requirements.txt.
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Step 4 (Optional): Pull data/models versioned with DVC.
      # In a real project, you would need to configure secrets for cloud storage access (e.g., AWS_ACCESS_KEY_ID).
      - name: Pull DVC data and models
        run: |
          dvc pull
        # If the pull fails (e.g., no DVC remote configured), the "continue-on-error" flag prevents the whole workflow from failing.
        continue-on-error: true

      # Step 5: Lint the code for style and quality checks using Ruff.
      - name: Lint with Ruff
        run: |
          ruff check .

      # Step 6: Run tests using Pytest to ensure the application logic is correct.
      - name: Run tests with Pytest
        run: |
          pytest

      # Step 7 (Example Build Step): Build the Docker image to ensure it's buildable.
      # This step assumes Docker is available on the runner, which it is on GitHub's runners.
      - name: Build Docker image
        run: |
          docker build . --file Dockerfile --tag my-image-name:$(date +%s)
